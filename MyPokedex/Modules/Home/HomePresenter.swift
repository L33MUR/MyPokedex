//
//  HomePresenter.swift
//  MyPokedex
//
//  Created by Pedro  Rey Simons on 01/03/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator and edited by Pedro Rey Simons.
//

import UIKit
import CoreData

final class HomePresenter:NSObject {
    private unowned let view:   HomeViewInterface
    private let interactor:     HomeInteractorInputInterface
    private let wireframe:      HomeWireframeInterface
    
    init(view: HomeViewInterface, interactor:HomeInteractorInputInterface, wireframe: HomeWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

extension HomePresenter: HomePresenterInterface {
    func refreshData() {
        DispatchQueue.main.async {
            self.interactor.fetchData()
            self.view.reloadCollectionView()
        }
    }
    
    func rightBarButtonPressed(){
        let action = UIAlertAction.init(title: NSLocalizedString("Reset", comment: "Reset database"), style:.destructive) { (_) in
            self.view.startActivity()
            self.interactor.resetDataBase()
        }
        let cancel = UIAlertAction.init(title: NSLocalizedString("Cancel", comment: "Cancel reset database action"), style: .cancel, handler:nil)
        
        wireframe.showAlert(with: "Reset Data Base", message: "Are you sure you want to reset the Data Base? All changes made will be lost.", actions: [action,cancel])
    }
    
    func didSelect(_ instance:PokemonEntity) {
        wireframe.presentDetailModule(for: instance, with: self)
    }
    
    func viewDidLoad(){
        interactor.fetchData()
    }
}

extension HomePresenter: HomeInteractorOutputInterface {
    func resetDataBaseFinished(_ result: Result<Void, Error>) {
        switch result {
            case .success():
                interactor.fetchData()
            case .failure(let error):
                view.reloadCollectionView()
                view.stopActivity()
                wireframe.presentFailureAlert(error:error)
        }
    }
    
    func fetchDataFinished(_ result: Result<[PokemonEntity], Error>) {
        switch result {
            case .success(let pokemonEntities):
                view.push(data:pokemonEntities)
                view.reloadCollectionView()
                view.stopActivity()
            case .failure(let error):
                wireframe.presentFailureAlert(error:error)
                view.reloadCollectionView()
                view.stopActivity()
        }
        
    }
}
