//
//  DetailPresenter.swift
//  MyPokedex
//
//  Created by Pedro  Rey Simons on 04/03/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator and edited by Pedro Rey Simons.
//

import Foundation

final class DetailPresenter {
    var instance:PokemonEntity!

    private unowned let view:   DetailViewInterface
    private let interactor:     DetailInteractorInputInterface
    private let wireframe:      DetailWireframeInterface
    
    init(view:      DetailViewInterface,
         interactor:DetailInteractorInputInterface,
         wireframe: DetailWireframeInterface) {
        self.view       = view
        self.interactor = interactor
        self.wireframe  = wireframe
    }
    
}

extension DetailPresenter: DetailPresenterInterface {
    func viewDidLoad(){
        interactor.extractDetailsFrom(instance)
    }
    
    func rightBarButtonPressed(){
        let action = UIAlertAction.init(title: NSLocalizedString("Delete", comment: "Reset database"), style:.destructive) { (_) in
            self.interactor.delete(self.instance)
        }
        let cancel = UIAlertAction.init(title: NSLocalizedString("Cancel", comment: "Cancel reset database action"), style: .cancel, handler:nil)
        
        wireframe.showAlert(with: "Delete \(self.instance.resourceName?.capitalized ?? "Pokemon")", message: "Are you sure you want to delete this Pokemon from the Data Base? This operation can't be undone.", actions: [action,cancel])
    }
    
    func switchControlChanged(isCaptured:Bool){
        interactor.setCaptured(instance, isCaptured: isCaptured)
    }
    
}

extension DetailPresenter: DetailInteractorOutputInterface {
    func deleteFinished(_ result: Result<Void, Error>) {
        wireframe.refreshHomeData()
        wireframe.popFromNavigationController(animated: true)
    }
    
    func setCapturedFinished(_ result: Result<Void, Error>) {
        switch result {
            case .success():
                wireframe.refreshHomeData()
                break
            case .failure(let error):
                let action = UIAlertAction.init(title: NSLocalizedString("Cancel", comment: "Undo changes"), style:.cancel) { (_) in
                    self.view.undoCapturedSwitchChange()
                }
                wireframe.showAlert(with: "Error", message: error.localizedDescription, actions: [action])
        }
    }
    
    func extractDetailsFinished(_ result: Result<PokemonDetail, Error>) {
        switch result{
            case .success(let detail):
                view.show(pokemonDetail: detail)
            case .failure(let error):
                let action = UIAlertAction.init(title: NSLocalizedString("Return", comment: "Continue without data"), style: .default) { (_) in
                    self.wireframe.popFromNavigationController(animated: true)
                }
                wireframe.showAlert(with: "Error", message: error.localizedDescription, actions: [action])
        }
    }
    
}
